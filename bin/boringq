#!/usr/bin/python

from json import dumps, loads
from os import chdir, dup2, fork, rename, setsid, umask
from os.path import join
from socket import getfqdn, socket, AF_INET, SOCK_STREAM
from SocketServer import BaseRequestHandler, ForkingMixIn, TCPServer
from sqlite3 import connect, OperationalError
from sys import argv, exit, stderr, stdin, stdout
from tempfile import mkdtemp
from time import sleep, time

MAX_MESSAGE_SIZE = 4096
CREATE_TABLE_SQL = '''CREATE TABLE IF NOT EXISTS queue
                      (id INTEGER PRIMARY KEY,
                       message TEXT)'''
GET_MESSAGE_SQL = '''SELECT id, message
                     FROM queue
                     ORDER BY id ASC
                     LIMIT 1'''
REMOVE_MESSAGE_SQL = '''DELETE FROM queue WHERE id = ?'''
INSERT_MESSAGE_SQL = '''INSERT INTO queue (message) VALUES (?)'''

def create_queue():
    queue_dir = mkdtemp(prefix='boringq.')
    pid = fork()
    if pid == 0: # Child
        _separate_child()
        _run_server(queue_dir)
    else: # Parent
        identifier_file = join(queue_dir, 'identifier.json')
        finish = int(time()) + 5
        while int(time()) < finish:
            try:
                with open(identifier_file, 'r') as f:
                    return f.read()
            except IOError:
                pass
        stderr.write('Timed out waiting for socket server.')
        return False

def enqueue(identifier, message):
    if len(message) > MAX_MESSAGE_SIZE:
        stderr.write("message too large (max %d bytes)\n" % MAX_MESSAGE_SIZE)
        return False
    q_info = loads(identifier)
    host = q_info['host']
    port = q_info['port']

    sock = socket(AF_INET, SOCK_STREAM)
    try:
        sock.connect((host, port))
        sock.sendall(message)
    finally:
        sock.close()
    return True

def dequeue(identifier):
    q_info = loads(identifier)
    queue_dir = q_info['queue_dir']
    connection = connect(join(queue_dir, 'queue.db'))
    cursor = connection.cursor()
    cursor.execute(CREATE_TABLE_SQL)
    connection.commit()
    while True:
        cursor.execute(GET_MESSAGE_SQL)
        rows = cursor.fetchall()
        if len(rows) > 0:
            id, message = rows[0]
            cursor.execute(REMOVE_MESSAGE_SQL, (id,))
            connection.commit()
            break
        else:
            connection.commit()
            sleep(0.1)
    connection.close()
    return message

def main(argv):
    if (len(argv) <= 1):
        stderr.write('Must supply an action as first argument\n')
        return False
    action = argv[1]
    if action == 'create_queue':
        output = create_queue()
        if output:
            stdout.write(output)
            return True
        else:
            return False
    elif action == 'enqueue' and len(argv) >= 3:
        message = stdin.read()
        return enqueue(argv[2], message)
    elif action == 'dequeue' and len(argv) >= 3:
        output = dequeue(argv[2])
        if output:
            stdout.write(output)
            return True
        else:
            return False
    else:
        stderr.write("action %s not recognised or wrong params\n" % action)
        return False

def _separate_child():
    chdir('/')
    setsid()
    umask(0)
    devnull = file('/dev/null', 'w')
    stdout.flush()
    stderr.flush()
    dup2(devnull.fileno(), stdout.fileno())
    dup2(devnull.fileno(), stderr.fileno())

def _run_server(queue_dir):
    host = getfqdn()
    server = QueueServer((host, 0), QueueRequestHandler)
    server.queue_dir = queue_dir
    ip, port = server.server_address
    identifier = {'host': host,
                  'port': port,
                  'queue_dir': queue_dir}

    temp_identifier_file = join(queue_dir, 'identifier.json.temp')
    identifier_file      = join(queue_dir, 'identifier.json')
    with open(temp_identifier_file, 'w') as f:
        f.write(dumps(identifier))
    rename(temp_identifier_file, identifier_file)

    server.serve_forever()

class QueueRequestHandler(BaseRequestHandler):
    def handle(self):
        message = self.request.recv(MAX_MESSAGE_SIZE)
        connection = connect(join(self.server.queue_dir, 'queue.db'))
        cursor = connection.cursor()
        cursor.execute(CREATE_TABLE_SQL)
        cursor.execute(INSERT_MESSAGE_SQL, (message,))
        connection.commit()
        connection.close()

class QueueServer(ForkingMixIn, TCPServer):
    pass

if main(argv):
    exit(0)
else:
    exit(1)

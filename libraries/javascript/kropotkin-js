if (!("console" in window) || !("log" in window.console)) {
    window.console = {"log": function(){}};
}

function shallow_copy(dict) {
    copy = {};
    for (key in dict) {
       copy[key] = dict[key];
    }
    return copy;
}

function store_fact(factspace, type, content, onresponse) {
    var query_content = {'type': type, 'confidence': 'fact'};
    get_all_facts(factspace, 'subscription', query_content, function(subs) {
        for (var i=0; i<subs.length; i++) {
            var identifier = subs[i]['queue'];
            queue_command('enqueue', JSON.stringify(content),
                          identifier, null);
        }
        var url = '/factspace/' + factspace + '/fact/' + type;
        http_request(url, 'POST', JSON.stringify(content), onresponse);
    });
}

function get_oldest_fact_and_stamp(factspace, type, criteria,
                                   stamp, onresponse) {
    var criteria = shallow_copy(criteria);
    kcriteria = 'stamp-' + stamp + ',result-oldest,number-1';
    criteria['kropotkin_criteria'] = kcriteria;
    get_first_fact(factspace, type, criteria, onresponse);
}

function get_newest_fact(factspace, type, criteria, onresponse) {
    var criteria = shallow_copy(criteria);
    criteria['kropotkin_criteria'] = 'result-newest,number-1';
    get_first_fact(factspace, type, criteria, onresponse);
}

function get_first_fact(factspace, type, criteria, onresponse) {
    get_all_facts(factspace, type, criteria, function(facts) {
        if (facts.length > 0) {
            onresponse(facts[0]);
        } else {
            onresponse(null);
        }
    });
}

function get_all_facts(factspace, type, criteria, onresponse) {
    var query_string = to_query_string(criteria);
    url = '/factspace/' + factspace + '/fact/' + type
        + '?' + to_query_string(criteria);
    http_request(url, 'GET', null, function(responseText) {
        onresponse(JSON.parse(responseText));
    });
}

function subscribe(factspace, confidence, type) {
    queue_command('create_queue', null, null, function(identifier) {
        var content = {'type': type,
                       'confidence': confidence,
                       'queue': identifier};
        store_fact(factspace, 'subscription', content, null);
        if (window.local_subscriptions === undefined) {
            window.local_subscriptions = {};
        }
        var key = [factspace, confidence, type].join('/');
        window.local_subscriptions[key] = identifier;
    });
}

function get_next_statement(factspace, confidence, type, onresponse) {
    var key = [factspace, confidence, type].join('/');
    var identifier = window.local_subscriptions[key];
    queue_command('dequeue', null, identifier, function(statement) {
        if (statement.length == 0) {
            get_next_statement(factspace, confidence, type, onresponse);
        } else {
            onresponse(JSON.parse(statement));
        }
    });
}

function get_my_computer_name(onresponse) {
    url = '/mycomputername';
    http_request(url, 'GET', null, onresponse);
}

function report_deployment(component_name) {
    if (window.kropotkin_components === undefined) {
        window.kropotkin_components = {'max_id': 0}
    }

    var local_id = window.kropotkin_components['max_id'];
    window.kropotkin_components[component_name] = {};
    window.kropotkin_components[component_name]['local_id'] = local_id;
    window.kropotkin_components['max_id']++;

    get_my_computer_name(function(computer_name) {
        var content = {'name': component_name,
                       'location': computer_name,
                       'identifier': local_id};
        store_fact('kropotkin', 'component_deployed', content, function(id) {
            window.kropotkin_components[component_name]['kropotkin_id'] = id;
        });
    });
}

function to_query_string(criteria) {
    criteria_strings = [];
    for (name in criteria) {
        criteria_strings.push(name + "=" + criteria[name]);
//        criteria_strings.push(encodeURIComponent(name) + "="
//                              + encodeURIComponent(criteria[name]));
    }
    return criteria_strings.join('&');
}

function queue_command(command, input, identifier, onresponse) {
    url = '/queue/' + command;
    if (identifier != null) {
        url += '/' + encodeURIComponent(identifier);
    }
    http_request(url, 'POST', input, onresponse);
}

POST_MIME_TYPE = 'application/x-www-form-urlencoded'
function http_request(url, verb, content, onresponse) {
    var xmlhttp = new XMLHttpRequest();
    if (onresponse) {
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState != 4) { return; }

            var status       = xmlhttp.status;
            var responseText = xmlhttp.responseText;

            if (status != 200) {
                console.log("Request to " + url + " failed: "
                            + "status = " + status + ", "
                            + "response = '" + responseText + "'");
                return;
            }
            onresponse(xmlhttp.responseText);
        }
    }
    xmlhttp.open(verb, url, true);
    if (verb == 'POST') {
        xmlhttp.setRequestHeader("Content-type", POST_MIME_TYPE);
    }
    if (content == null) {
        xmlhttp.send();
    } else {
        xmlhttp.send(content);
    }
}

report_deployment('kropotkin-js');